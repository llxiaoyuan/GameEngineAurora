#include<Aurora/Keyboard.hpp>

std::unordered_map<Keyboard::Key, bool> Keyboard::keyPressMap;

std::map<Keyboard::Key, Event> Keyboard::keyPressEvents;

std::map<Keyboard::Key, Event> Keyboard::keyUpEvents;

bool Keyboard::getKeyPress(const Key& key)
{
	return keyPressMap[key];
}



void Keyboard::removeKeyPressEvent(const Key& key, const int& id)
{
	keyPressEvents[key].removeHandler(id);
}

void Keyboard::removeKeyUpEvent(const Key& key, const int& id)
{
	keyUpEvents[key].removeHandler(id);
}

void Keyboard::ini()
{
	keyPressMap.insert(std::pair<Key, bool>(Space, false));
	keyPressMap.insert(std::pair<Key, bool>(Apostrophe, false));
	keyPressMap.insert(std::pair<Key, bool>(Comma, false));
	keyPressMap.insert(std::pair<Key, bool>(Minus, false));
	keyPressMap.insert(std::pair<Key, bool>(Period, false));
	keyPressMap.insert(std::pair<Key, bool>(Slash, false));
	keyPressMap.insert(std::pair<Key, bool>(Num0, false));
	keyPressMap.insert(std::pair<Key, bool>(Num1, false));
	keyPressMap.insert(std::pair<Key, bool>(Num2, false));
	keyPressMap.insert(std::pair<Key, bool>(Num3, false));
	keyPressMap.insert(std::pair<Key, bool>(Num4, false));
	keyPressMap.insert(std::pair<Key, bool>(Num5, false));
	keyPressMap.insert(std::pair<Key, bool>(Num6, false));
	keyPressMap.insert(std::pair<Key, bool>(Num7, false));
	keyPressMap.insert(std::pair<Key, bool>(Num8, false));
	keyPressMap.insert(std::pair<Key, bool>(Num9, false));
	keyPressMap.insert(std::pair<Key, bool>(Semicolon, false));
	keyPressMap.insert(std::pair<Key, bool>(Equal, false));
	keyPressMap.insert(std::pair<Key, bool>(A, false));
	keyPressMap.insert(std::pair<Key, bool>(B, false));
	keyPressMap.insert(std::pair<Key, bool>(C, false));
	keyPressMap.insert(std::pair<Key, bool>(D, false));
	keyPressMap.insert(std::pair<Key, bool>(E, false));
	keyPressMap.insert(std::pair<Key, bool>(F, false));
	keyPressMap.insert(std::pair<Key, bool>(G, false));
	keyPressMap.insert(std::pair<Key, bool>(H, false));
	keyPressMap.insert(std::pair<Key, bool>(I, false));
	keyPressMap.insert(std::pair<Key, bool>(J, false));
	keyPressMap.insert(std::pair<Key, bool>(K, false));
	keyPressMap.insert(std::pair<Key, bool>(L, false));
	keyPressMap.insert(std::pair<Key, bool>(M, false));
	keyPressMap.insert(std::pair<Key, bool>(N, false));
	keyPressMap.insert(std::pair<Key, bool>(O, false));
	keyPressMap.insert(std::pair<Key, bool>(P, false));
	keyPressMap.insert(std::pair<Key, bool>(Q, false));
	keyPressMap.insert(std::pair<Key, bool>(R, false));
	keyPressMap.insert(std::pair<Key, bool>(S, false));
	keyPressMap.insert(std::pair<Key, bool>(T, false));
	keyPressMap.insert(std::pair<Key, bool>(U, false));
	keyPressMap.insert(std::pair<Key, bool>(V, false));
	keyPressMap.insert(std::pair<Key, bool>(W, false));
	keyPressMap.insert(std::pair<Key, bool>(X, false));
	keyPressMap.insert(std::pair<Key, bool>(Y, false));
	keyPressMap.insert(std::pair<Key, bool>(Z, false));
	keyPressMap.insert(std::pair<Key, bool>(Left_Bracket, false));
	keyPressMap.insert(std::pair<Key, bool>(Backslash, false));
	keyPressMap.insert(std::pair<Key, bool>(Right_Bracket, false));
	keyPressMap.insert(std::pair<Key, bool>(Grave_Accent, false));
	keyPressMap.insert(std::pair<Key, bool>(Escape, false));
	keyPressMap.insert(std::pair<Key, bool>(Enter, false));
	keyPressMap.insert(std::pair<Key, bool>(Tab, false));
	keyPressMap.insert(std::pair<Key, bool>(Backspace, false));
	keyPressMap.insert(std::pair<Key, bool>(Insert, false));
	keyPressMap.insert(std::pair<Key, bool>(Delete, false));
	keyPressMap.insert(std::pair<Key, bool>(Right, false));
	keyPressMap.insert(std::pair<Key, bool>(Left, false));
	keyPressMap.insert(std::pair<Key, bool>(Down, false));
	keyPressMap.insert(std::pair<Key, bool>(Up, false));
	keyPressMap.insert(std::pair<Key, bool>(Page_Up, false));
	keyPressMap.insert(std::pair<Key, bool>(PAGE_Down, false));
	keyPressMap.insert(std::pair<Key, bool>(Home, false));
	keyPressMap.insert(std::pair<Key, bool>(End, false));
	keyPressMap.insert(std::pair<Key, bool>(Caps_Lock, false));
	keyPressMap.insert(std::pair<Key, bool>(Scroll_Lock, false));
	keyPressMap.insert(std::pair<Key, bool>(Num_Lock, false));
	keyPressMap.insert(std::pair<Key, bool>(Print_Screen, false));
	keyPressMap.insert(std::pair<Key, bool>(Pause, false));
	keyPressMap.insert(std::pair<Key, bool>(F1, false));
	keyPressMap.insert(std::pair<Key, bool>(F2, false));
	keyPressMap.insert(std::pair<Key, bool>(F3, false));
	keyPressMap.insert(std::pair<Key, bool>(F4, false));
	keyPressMap.insert(std::pair<Key, bool>(F5, false));
	keyPressMap.insert(std::pair<Key, bool>(F6, false));
	keyPressMap.insert(std::pair<Key, bool>(F7, false));
	keyPressMap.insert(std::pair<Key, bool>(F8, false));
	keyPressMap.insert(std::pair<Key, bool>(F9, false));
	keyPressMap.insert(std::pair<Key, bool>(F10, false));
	keyPressMap.insert(std::pair<Key, bool>(F11, false));
	keyPressMap.insert(std::pair<Key, bool>(F12, false));
	keyPressMap.insert(std::pair<Key, bool>(F13, false));
	keyPressMap.insert(std::pair<Key, bool>(F14, false));
	keyPressMap.insert(std::pair<Key, bool>(F15, false));
	keyPressMap.insert(std::pair<Key, bool>(F16, false));
	keyPressMap.insert(std::pair<Key, bool>(F17, false));
	keyPressMap.insert(std::pair<Key, bool>(F18, false));
	keyPressMap.insert(std::pair<Key, bool>(F19, false));
	keyPressMap.insert(std::pair<Key, bool>(F20, false));
	keyPressMap.insert(std::pair<Key, bool>(F21, false));
	keyPressMap.insert(std::pair<Key, bool>(F22, false));
	keyPressMap.insert(std::pair<Key, bool>(F23, false));
	keyPressMap.insert(std::pair<Key, bool>(F24, false));
	keyPressMap.insert(std::pair<Key, bool>(F25, false));
	keyPressMap.insert(std::pair<Key, bool>(Numpad0, false));
	keyPressMap.insert(std::pair<Key, bool>(Numpad1, false));
	keyPressMap.insert(std::pair<Key, bool>(Numpad2, false));
	keyPressMap.insert(std::pair<Key, bool>(Numpad3, false));
	keyPressMap.insert(std::pair<Key, bool>(Numpad4, false));
	keyPressMap.insert(std::pair<Key, bool>(Numpad5, false));
	keyPressMap.insert(std::pair<Key, bool>(Numpad6, false));
	keyPressMap.insert(std::pair<Key, bool>(Numpad7, false));
	keyPressMap.insert(std::pair<Key, bool>(Numpad8, false));
	keyPressMap.insert(std::pair<Key, bool>(Numpad9, false));
	keyPressMap.insert(std::pair<Key, bool>(Numpad_Decimal, false));
	keyPressMap.insert(std::pair<Key, bool>(Numpad_Divide, false));
	keyPressMap.insert(std::pair<Key, bool>(Numpad_Multiply, false));
	keyPressMap.insert(std::pair<Key, bool>(Numpad_Subtract, false));
	keyPressMap.insert(std::pair<Key, bool>(Numpad_Add, false));
	keyPressMap.insert(std::pair<Key, bool>(Numpad_Enter, false));
	keyPressMap.insert(std::pair<Key, bool>(Numpad_Equal, false));
	keyPressMap.insert(std::pair<Key, bool>(Left_Shift, false));
	keyPressMap.insert(std::pair<Key, bool>(Left_Control, false));
	keyPressMap.insert(std::pair<Key, bool>(Left_Alt, false));
	keyPressMap.insert(std::pair<Key, bool>(Left_Super, false));
	keyPressMap.insert(std::pair<Key, bool>(Right_Shift, false));
	keyPressMap.insert(std::pair<Key, bool>(Right_Control, false));
	keyPressMap.insert(std::pair<Key, bool>(Right_Alt, false));
	keyPressMap.insert(std::pair<Key, bool>(Right_Super, false));
	keyPressMap.insert(std::pair<Key, bool>(Menu, false));

	keyPressEvents.insert(std::pair<Key, Event>(Space, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(Apostrophe, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(Comma, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(Minus, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(Period, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(Slash, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(Num0, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(Num1, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(Num2, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(Num3, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(Num4, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(Num5, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(Num6, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(Num7, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(Num8, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(Num9, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(Semicolon, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(Equal, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(A, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(B, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(C, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(D, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(E, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(F, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(G, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(H, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(I, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(J, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(K, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(L, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(M, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(N, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(O, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(P, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(Q, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(R, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(S, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(T, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(U, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(V, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(W, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(X, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(Y, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(Z, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(Left_Bracket, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(Backslash, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(Right_Bracket, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(Grave_Accent, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(Escape, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(Enter, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(Tab, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(Backspace, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(Insert, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(Delete, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(Right, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(Left, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(Down, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(Up, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(Page_Up, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(PAGE_Down, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(Home, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(End, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(Caps_Lock, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(Scroll_Lock, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(Num_Lock, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(Print_Screen, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(Pause, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(F1, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(F2, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(F3, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(F4, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(F5, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(F6, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(F7, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(F8, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(F9, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(F10, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(F11, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(F12, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(F13, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(F14, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(F15, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(F16, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(F17, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(F18, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(F19, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(F20, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(F21, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(F22, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(F23, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(F24, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(F25, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(Numpad0, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(Numpad1, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(Numpad2, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(Numpad3, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(Numpad4, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(Numpad5, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(Numpad6, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(Numpad7, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(Numpad8, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(Numpad9, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(Numpad_Decimal, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(Numpad_Divide, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(Numpad_Multiply, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(Numpad_Subtract, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(Numpad_Add, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(Numpad_Enter, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(Numpad_Equal, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(Left_Shift, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(Left_Control, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(Left_Alt, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(Left_Super, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(Right_Shift, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(Right_Control, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(Right_Alt, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(Right_Super, Event()));
	keyPressEvents.insert(std::pair<Key, Event>(Menu, Event()));

	keyUpEvents.insert(std::pair<Key, Event>(Space, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(Apostrophe, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(Comma, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(Minus, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(Period, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(Slash, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(Num0, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(Num1, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(Num2, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(Num3, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(Num4, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(Num5, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(Num6, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(Num7, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(Num8, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(Num9, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(Semicolon, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(Equal, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(A, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(B, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(C, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(D, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(E, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(F, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(G, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(H, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(I, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(J, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(K, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(L, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(M, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(N, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(O, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(P, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(Q, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(R, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(S, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(T, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(U, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(V, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(W, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(X, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(Y, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(Z, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(Left_Bracket, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(Backslash, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(Right_Bracket, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(Grave_Accent, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(Escape, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(Enter, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(Tab, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(Backspace, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(Insert, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(Delete, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(Right, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(Left, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(Down, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(Up, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(Page_Up, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(PAGE_Down, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(Home, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(End, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(Caps_Lock, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(Scroll_Lock, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(Num_Lock, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(Print_Screen, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(Pause, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(F1, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(F2, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(F3, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(F4, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(F5, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(F6, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(F7, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(F8, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(F9, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(F10, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(F11, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(F12, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(F13, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(F14, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(F15, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(F16, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(F17, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(F18, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(F19, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(F20, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(F21, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(F22, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(F23, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(F24, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(F25, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(Numpad0, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(Numpad1, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(Numpad2, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(Numpad3, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(Numpad4, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(Numpad5, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(Numpad6, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(Numpad7, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(Numpad8, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(Numpad9, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(Numpad_Decimal, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(Numpad_Divide, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(Numpad_Multiply, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(Numpad_Subtract, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(Numpad_Add, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(Numpad_Enter, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(Numpad_Equal, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(Left_Shift, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(Left_Control, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(Left_Alt, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(Left_Super, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(Right_Shift, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(Right_Control, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(Right_Alt, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(Right_Super, Event()));
	keyUpEvents.insert(std::pair<Key, Event>(Menu, Event()));
}

void key_callback(GLFWwindow* window, int key, int scancode, int action, int mods)
{
	switch (action)
	{
	case GLFW_PRESS:
		Keyboard::keyPressEvents[(Keyboard::Key)key]();
		Keyboard::keyPressMap[(Keyboard::Key)key] = true;
		break;
	case GLFW_RELEASE:
		Keyboard::keyUpEvents[(Keyboard::Key)key]();
		Keyboard::keyPressMap[(Keyboard::Key)key] = false;
		break;
	default:
		break;
	}
}